openapi: 3.0.3
info:
  title: MapleStory AI Chatbot API
  description: |
    메이플스토리 웹 챗봇 프로젝트의 통합 API 명세서입니다.
    
    ## 서비스 구조
    - **Django Server (8000)**: 메인 웹 서비스 및 API
    - **FastAPI Server (8001)**: AI 모델 전용 서비스
    
    ## 인증
    대부분의 API는 Bearer Token 인증을 사용합니다.
    `/auth/login/` 엔드포인트에서 토큰을 받아 사용하세요.
    
    ## 에러 코드
    - `400`: 잘못된 요청
    - `401`: 인증 필요/실패
    - `403`: 권한 없음
    - `404`: 리소스를 찾을 수 없음
    - `500`: 서버 내부 오류
    
    ## 개발팀 연락처
    - GitHub: [MAI_Help_You](https://github.com/your-repo/MAI_Help_You)
    - 문의: mai-chatbot@example.com
    
  version: 1.0.0
  contact:
    name: MAI Chatbot Team
    email: mai-chatbot@example.com
    url: https://github.com/your-repo/MAI_Help_You
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Django Development Server
  - url: http://localhost:8001
    description: FastAPI AI Model Server
  - url: https://api.mai-chatbot.com
    description: Production Server (준비 중)

# 태그 정의 (API 그룹핑)
tags:
  - name: Authentication
    description: 로그인/로그아웃 및 토큰 관리
  - name: Chatbot
    description: AI 챗봇 대화 및 기록 관리
  - name: Character
    description: 메이플스토리 캐릭터 정보 관리
  - name: Main
    description: 메인 페이지 및 공지사항
  - name: AI Model
    description: FastAPI 기반 AI 모델 직접 호출
  - name: System
    description: 시스템 상태 확인 및 헬스체크

paths:
  # 인증 관련 API
  /auth/login/:
    $ref: './auth.yaml#/paths/~1auth~1login~1'
  /auth/logout/:
    $ref: './auth.yaml#/paths/~1auth~1logout~1'
  /auth/refresh/:
    $ref: './auth.yaml#/paths/~1auth~1refresh~1'
  
  # 챗봇 관련 API
  /chatbot/ask/:
    $ref: './chatbot.yaml#/paths/~1chatbot~1ask~1'
  /chatbot/history/:
    $ref: './chatbot.yaml#/paths/~1chatbot~1history~1'
  /chatbot/clear-history/:
    $ref: './chatbot.yaml#/paths/~1chatbot~1clear-history~1'
  /chatbot/health/:
    $ref: './chatbot.yaml#/paths/~1chatbot~1health~1'
  
  # 캐릭터 관련 API
  /character_info/{character_id}/:
    $ref: './character.yaml#/paths/~1character_info~1{character_id}~1'
  /character_info/search/:
    $ref: './character.yaml#/paths/~1character_info~1search~1'
  /character_info/{character_id}/stats/:
    $ref: './character.yaml#/paths/~1character_info~1{character_id}~1stats~1'
  
  # 메인 페이지 관련 API
  /api/notice/:
    $ref: './main.yaml#/paths/~1api~1notice~1'
  /api/notice/{notice_id}/:
    $ref: './main.yaml#/paths/~1api~1notice~1{notice_id}~1'
  /api/events/:
    $ref: './main.yaml#/paths/~1api~1events~1'
  /health/:
    $ref: './main.yaml#/paths/~1health~1'
  
  # FastAPI 서비스 API (포트 8001)
  /api/chat:
    $ref: './fastapi.yaml#/paths/~1api~1chat'
  /api/model/status:
    $ref: './fastapi.yaml#/paths/~1api~1model~1status'
  /api/model/reload:
    $ref: './fastapi.yaml#/paths/~1api~1model~1reload'

# 공통 컴포넌트 참조
components:
  # 보안 스키마
  securitySchemes:
    bearerAuth:
      $ref: '../schemas/common.yaml#/components/securitySchemes/bearerAuth'
    apiKeyAuth:
      $ref: './fastapi.yaml#/components/securitySchemes/apiKeyAuth'
  
  # 공통 스키마
  schemas:
    # 공통 응답 스키마
    SuccessResponse:
      $ref: '../schemas/common.yaml#/components/schemas/SuccessResponse'
    ErrorResponse:
      $ref: '../schemas/common.yaml#/components/schemas/ErrorResponse'
    PaginationMeta:
      $ref: '../schemas/common.yaml#/components/schemas/PaginationMeta'
    
    # 데이터 모델
    User:
      $ref: '../schemas/models.yaml#/components/schemas/User'
    ChatMessage:
      $ref: '../schemas/models.yaml#/components/schemas/ChatMessage'
    SourceDocument:
      $ref: '../schemas/models.yaml#/components/schemas/SourceDocument'
    Character:
      $ref: './character.yaml#/components/schemas/Character'
    CharacterStats:
      $ref: './character.yaml#/components/schemas/CharacterStats'
    Notice:
      $ref: './main.yaml#/components/schemas/Notice'
    Event:
      $ref: './main.yaml#/components/schemas/Event'
  
  # 공통 파라미터
  parameters:
    UserIdParam:
      $ref: '../schemas/common.yaml#/components/parameters/UserIdParam'
    PageParam:
      $ref: '../schemas/common.yaml#/components/parameters/PageParam'
    LimitParam:
      $ref: '../schemas/common.yaml#/components/parameters/LimitParam'

# API별 예시 요청/응답
x-examples:
  chatbot-conversation:
    summary: 챗봇 대화 예시
    description: 메이플스토리 레벨업에 대한 질문과 답변
    value:
      request:
        question: "메이플스토리에서 200레벨까지 빠르게 올리는 방법이 뭐야?"
        user_id: "user123"
      response:
        success: true
        data:
          answer: "200레벨까지 효율적으로 레벨업하기 위해서는 다음과 같은 방법들을 추천드립니다:\n\n1. **아케인 리버 일일퀘스트**: 매일 빠짐없이 수행\n2. **몬스터파크**: 하루 2회 입장하여 대량 경험치 획득\n3. **스타포스**: 적절한 스타포스 맵에서 사냥\n4. **경험치 쿠폰**: 이벤트나 상점에서 획득한 쿠폰 활용\n\n현재 레벨대에 맞는 사냥터와 퀘스트를 병행하시면 효율적으로 성장하실 수 있습니다."
          sources:
            - title: "메이플스토리 레벨업 가이드"
              snippet: "아케인 리버에서는 일일 퀘스트를 통해..."
              score: 0.89
          conversation_id: "conv_20240115_001"
        timestamp: "2024-01-15T10:30:00Z"
  
  character-search:
    summary: 캐릭터 검색 예시
    description: 특정 조건으로 캐릭터 검색
    value:
      request:
        name: "용사"
        job: "히어로"
        min_level: 200
      response:
        success: true
        data:
          characters:
            - id: 101
              name: "용사123"
              level: 210
              job: "히어로"
              world: "스카니아"
              is_main: true
          pagination:
            page: 1
            per_page: 20
            total: 1
            pages: 1
