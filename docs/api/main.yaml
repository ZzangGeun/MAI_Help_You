openapi: 3.0.3
info:
  title: MAI Chatbot - Main Page API
  description: 메이플스토리 챗봇 프로젝트 - 메인 페이지 관련 API
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: Django Development Server

paths:
  /api/notice/:
    get:
      tags:
        - Main
      summary: 공지사항 목록 조회
      description: 메이플스토리 관련 공지사항 목록을 조회합니다
      parameters:
        - $ref: '../schemas/common.yaml#/components/parameters/PageParam'
        - $ref: '../schemas/common.yaml#/components/parameters/LimitParam'
        - name: category
          in: query
          description: 공지사항 카테고리 필터
          required: false
          schema:
            type: string
            enum: [update, event, maintenance, bug_fix]
            example: "update"
        - name: important_only
          in: query
          description: 중요 공지만 조회
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: 공지사항 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../schemas/common.yaml#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notices:
                            type: array
                            items:
                              $ref: '#/components/schemas/Notice'
                          pagination:
                            $ref: '../schemas/common.yaml#/components/schemas/PaginationMeta'

  /api/notice/{notice_id}/:
    get:
      tags:
        - Main
      summary: 공지사항 상세 조회
      description: 특정 공지사항의 상세 내용을 조회합니다
      parameters:
        - name: notice_id
          in: path
          required: true
          description: 공지사항 ID
          schema:
            type: integer
            minimum: 1
            example: 1
      responses:
        "200":
          description: 공지사항 상세 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../schemas/common.yaml#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NoticeDetail'
        "404":
          description: 공지사항을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/components/schemas/ErrorResponse'

  /api/events/:
    get:
      tags:
        - Main
      summary: 진행 중인 이벤트 조회
      description: 현재 진행 중인 메이플스토리 이벤트 목록을 조회합니다
      parameters:
        - name: status
          in: query
          description: 이벤트 상태 필터
          required: false
          schema:
            type: string
            enum: [ongoing, upcoming, ended]
            default: ongoing
      responses:
        "200":
          description: 이벤트 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../schemas/common.yaml#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          events:
                            type: array
                            items:
                              $ref: '#/components/schemas/Event'

  /health/:
    get:
      tags:
        - System
      summary: 전체 서비스 상태 확인
      description: Django 서버와 연결된 모든 서비스의 상태를 확인합니다
      responses:
        "200":
          description: 서비스 정상 동작
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../schemas/common.yaml#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            enum: [healthy, degraded, down]
                            example: "healthy"
                          services:
                            type: object
                            properties:
                              database:
                                type: string
                                enum: [connected, error]
                                example: "connected"
                              chatbot:
                                type: string
                                enum: [ready, loading, error]
                                example: "ready"
                              external_api:
                                type: string
                                enum: [available, limited, unavailable]
                                example: "available"
                          uptime:
                            type: number
                            description: 서버 가동 시간(초)
                            example: 3600
                          version:
                            type: string
                            example: "1.0.0"
        "503":
          description: 서비스 사용 불가
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/components/schemas/ErrorResponse'

components:
  schemas:
    Notice:
      type: object
      properties:
        id:
          type: integer
          description: 공지사항 ID
          example: 1
        title:
          type: string
          description: 공지사항 제목
          example: "2024년 신년 이벤트 안내"
        category:
          type: string
          enum: [update, event, maintenance, bug_fix]
          description: 공지사항 카테고리
          example: "event"
        is_important:
          type: boolean
          description: 중요 공지 여부
          example: true
        summary:
          type: string
          description: 공지사항 요약
          example: "2024년 신년을 맞아 다양한 이벤트가 진행됩니다."
        created_at:
          type: string
          format: date-time
          description: 작성일시
          example: "2024-01-01T00:00:00Z"
        views:
          type: integer
          description: 조회수
          example: 1250

    NoticeDetail:
      allOf:
        - $ref: '#/components/schemas/Notice'
        - type: object
          properties:
            content:
              type: string
              description: 공지사항 전체 내용
              example: "안녕하세요, 메이플스토리 운영팀입니다..."
            attachments:
              type: array
              description: 첨부파일 목록
              items:
                type: object
                properties:
                  filename:
                    type: string
                    example: "event_guide.pdf"
                  url:
                    type: string
                    example: "/media/attachments/event_guide.pdf"
                  size:
                    type: integer
                    description: 파일 크기(바이트)
                    example: 1024000
            updated_at:
              type: string
              format: date-time
              description: 최종 수정일시
              example: "2024-01-02T12:00:00Z"

    Event:
      type: object
      properties:
        id:
          type: integer
          description: 이벤트 ID
          example: 1
        title:
          type: string
          description: 이벤트 제목
          example: "레벨업 2배 경험치 이벤트"
        description:
          type: string
          description: 이벤트 설명
          example: "모든 몬스터 처치 시 경험치 2배 획득!"
        start_date:
          type: string
          format: date-time
          description: 이벤트 시작일
          example: "2024-01-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          description: 이벤트 종료일
          example: "2024-01-31T23:59:59Z"
        status:
          type: string
          enum: [ongoing, upcoming, ended]
          description: 이벤트 상태
          example: "ongoing"
        rewards:
          type: array
          description: 이벤트 보상 목록
          items:
            type: object
            properties:
              item_name:
                type: string
                example: "경험치 쿠폰"
              quantity:
                type: integer
                example: 10
              condition:
                type: string
                example: "레벨 100 달성 시"
        banner_image:
          type: string
          description: 이벤트 배너 이미지 URL
          example: "/static/images/events/level_up_event.jpg"
